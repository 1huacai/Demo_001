// Generated by sprotodump. DO NOT EDIT!
// source: D:\LUWENHAI\UProject\PanelDemo\Project\Sproto\proto\/proto.c2s.sproto

using System;
using Sproto;
using System.Collections.Generic;

namespace C2S_SprotoType { 
	public class auth {
	
		public class request : SprotoTypeBase {
			private static int max_field_count = 2;
			
			
			private string _imei; // tag 0
			public string imei {
				get { return _imei; }
				set { base.has_field.set_field (0, true); _imei = value; }
			}
			public bool HasImei {
				get { return base.has_field.has_field (0); }
			}

			private string _version; // tag 1
			public string version {
				get { return _version; }
				set { base.has_field.set_field (1, true); _version = value; }
			}
			public bool HasVersion {
				get { return base.has_field.has_field (1); }
			}

			public request () : base(max_field_count) {}

			public request (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.imei = base.deserialize.read_string ();
						break;
					case 1:
						this.version = base.deserialize.read_string ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_string (this.imei, 0);
				}

				if (base.has_field.has_field (1)) {
					base.serialize.write_string (this.version, 1);
				}

				return base.serialize.close ();
			}
		}


		public class response : SprotoTypeBase {
			private static int max_field_count = 3;
			
			
			private Int64 _e; // tag 0
			public Int64 e {
				get { return _e; }
				set { base.has_field.set_field (0, true); _e = value; }
			}
			public bool HasE {
				get { return base.has_field.has_field (0); }
			}

			private string _rid; // tag 1
			public string rid {
				get { return _rid; }
				set { base.has_field.set_field (1, true); _rid = value; }
			}
			public bool HasRid {
				get { return base.has_field.has_field (1); }
			}

			private Int64 _server_time; // tag 2
			public Int64 server_time {
				get { return _server_time; }
				set { base.has_field.set_field (2, true); _server_time = value; }
			}
			public bool HasServer_time {
				get { return base.has_field.has_field (2); }
			}

			public response () : base(max_field_count) {}

			public response (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.e = base.deserialize.read_integer ();
						break;
					case 1:
						this.rid = base.deserialize.read_string ();
						break;
					case 2:
						this.server_time = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.e, 0);
				}

				if (base.has_field.has_field (1)) {
					base.serialize.write_string (this.rid, 1);
				}

				if (base.has_field.has_field (2)) {
					base.serialize.write_integer (this.server_time, 2);
				}

				return base.serialize.close ();
			}
		}


	}


	public class block_info : SprotoTypeBase {
		private static int max_field_count = 5;
		
		
		private Int64 _row; // tag 0
		public Int64 row {
			get { return _row; }
			set { base.has_field.set_field (0, true); _row = value; }
		}
		public bool HasRow {
			get { return base.has_field.has_field (0); }
		}

		private Int64 _col; // tag 1
		public Int64 col {
			get { return _col; }
			set { base.has_field.set_field (1, true); _col = value; }
		}
		public bool HasCol {
			get { return base.has_field.has_field (1); }
		}

		private Int64 _shape; // tag 2
		public Int64 shape {
			get { return _shape; }
			set { base.has_field.set_field (2, true); _shape = value; }
		}
		public bool HasShape {
			get { return base.has_field.has_field (2); }
		}

		private Int64 _state; // tag 3
		public Int64 state {
			get { return _state; }
			set { base.has_field.set_field (3, true); _state = value; }
		}
		public bool HasState {
			get { return base.has_field.has_field (3); }
		}

		private Int64 _frame; // tag 4
		public Int64 frame {
			get { return _frame; }
			set { base.has_field.set_field (4, true); _frame = value; }
		}
		public bool HasFrame {
			get { return base.has_field.has_field (4); }
		}

		public block_info () : base(max_field_count) {}

		public block_info (byte[] buffer) : base(max_field_count, buffer) {
			this.decode ();
		}

		protected override void decode () {
			int tag = -1;
			while (-1 != (tag = base.deserialize.read_tag ())) {
				switch (tag) {
				case 0:
					this.row = base.deserialize.read_integer ();
					break;
				case 1:
					this.col = base.deserialize.read_integer ();
					break;
				case 2:
					this.shape = base.deserialize.read_integer ();
					break;
				case 3:
					this.state = base.deserialize.read_integer ();
					break;
				case 4:
					this.frame = base.deserialize.read_integer ();
					break;
				default:
					base.deserialize.read_unknow_data ();
					break;
				}
			}
		}

		public override int encode (SprotoStream stream) {
			base.serialize.open (stream);

			if (base.has_field.has_field (0)) {
				base.serialize.write_integer (this.row, 0);
			}

			if (base.has_field.has_field (1)) {
				base.serialize.write_integer (this.col, 1);
			}

			if (base.has_field.has_field (2)) {
				base.serialize.write_integer (this.shape, 2);
			}

			if (base.has_field.has_field (3)) {
				base.serialize.write_integer (this.state, 3);
			}

			if (base.has_field.has_field (4)) {
				base.serialize.write_integer (this.frame, 4);
			}

			return base.serialize.close ();
		}
	}


	public class game_give_up {
	
		public class request : SprotoTypeBase {
			private static int max_field_count = 1;
			
			
			private Int64 _frame; // tag 0
			public Int64 frame {
				get { return _frame; }
				set { base.has_field.set_field (0, true); _frame = value; }
			}
			public bool HasFrame {
				get { return base.has_field.has_field (0); }
			}

			public request () : base(max_field_count) {}

			public request (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.frame = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.frame, 0);
				}

				return base.serialize.close ();
			}
		}


		public class response : SprotoTypeBase {
			private static int max_field_count = 1;
			
			
			private Int64 _e; // tag 0
			public Int64 e {
				get { return _e; }
				set { base.has_field.set_field (0, true); _e = value; }
			}
			public bool HasE {
				get { return base.has_field.has_field (0); }
			}

			public response () : base(max_field_count) {}

			public response (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.e = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.e, 0);
				}

				return base.serialize.close ();
			}
		}


	}


	public class game_info {
	
		public class request : SprotoTypeBase {
			private static int max_field_count = 0;
			
			
			public request () : base(max_field_count) {}

			public request (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				return base.serialize.close ();
			}
		}


		public class response : SprotoTypeBase {
			private static int max_field_count = 3;
			
			
			private Int64 _e; // tag 0
			public Int64 e {
				get { return _e; }
				set { base.has_field.set_field (0, true); _e = value; }
			}
			public bool HasE {
				get { return base.has_field.has_field (0); }
			}

			private Int64 _frame; // tag 1
			public Int64 frame {
				get { return _frame; }
				set { base.has_field.set_field (1, true); _frame = value; }
			}
			public bool HasFrame {
				get { return base.has_field.has_field (1); }
			}

			private List<block_info> _blocks; // tag 2
			public List<block_info> blocks {
				get { return _blocks; }
				set { base.has_field.set_field (2, true); _blocks = value; }
			}
			public bool HasBlocks {
				get { return base.has_field.has_field (2); }
			}

			public response () : base(max_field_count) {}

			public response (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.e = base.deserialize.read_integer ();
						break;
					case 1:
						this.frame = base.deserialize.read_integer ();
						break;
					case 2:
						this.blocks = base.deserialize.read_obj_list<block_info> ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.e, 0);
				}

				if (base.has_field.has_field (1)) {
					base.serialize.write_integer (this.frame, 1);
				}

				if (base.has_field.has_field (2)) {
					base.serialize.write_obj (this.blocks, 2);
				}

				return base.serialize.close ();
			}
		}


	}


	public class game_matched {
	
		public class request : SprotoTypeBase {
			private static int max_field_count = 3;
			
			
			private Int64 _frame; // tag 0
			public Int64 frame {
				get { return _frame; }
				set { base.has_field.set_field (0, true); _frame = value; }
			}
			public bool HasFrame {
				get { return base.has_field.has_field (0); }
			}

			private List<block_info> _matched_blocks; // tag 2
			public List<block_info> matched_blocks {
				get { return _matched_blocks; }
				set { base.has_field.set_field (1, true); _matched_blocks = value; }
			}
			public bool HasMatched_blocks {
				get { return base.has_field.has_field (1); }
			}

			public request () : base(max_field_count) {}

			public request (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.frame = base.deserialize.read_integer ();
						break;
					case 2:
						this.matched_blocks = base.deserialize.read_obj_list<block_info> ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.frame, 0);
				}

				if (base.has_field.has_field (1)) {
					base.serialize.write_obj (this.matched_blocks, 2);
				}

				return base.serialize.close ();
			}
		}


		public class response : SprotoTypeBase {
			private static int max_field_count = 1;
			
			
			private Int64 _e; // tag 0
			public Int64 e {
				get { return _e; }
				set { base.has_field.set_field (0, true); _e = value; }
			}
			public bool HasE {
				get { return base.has_field.has_field (0); }
			}

			public response () : base(max_field_count) {}

			public response (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.e = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.e, 0);
				}

				return base.serialize.close ();
			}
		}


	}


	public class game_new_row {
	
		public class request : SprotoTypeBase {
			private static int max_field_count = 1;
			
			
			private Int64 _frame; // tag 0
			public Int64 frame {
				get { return _frame; }
				set { base.has_field.set_field (0, true); _frame = value; }
			}
			public bool HasFrame {
				get { return base.has_field.has_field (0); }
			}

			public request () : base(max_field_count) {}

			public request (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.frame = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.frame, 0);
				}

				return base.serialize.close ();
			}
		}


		public class response : SprotoTypeBase {
			private static int max_field_count = 2;
			
			
			private Int64 _e; // tag 0
			public Int64 e {
				get { return _e; }
				set { base.has_field.set_field (0, true); _e = value; }
			}
			public bool HasE {
				get { return base.has_field.has_field (0); }
			}

			private List<block_info> _row_blocks; // tag 1
			public List<block_info> row_blocks {
				get { return _row_blocks; }
				set { base.has_field.set_field (1, true); _row_blocks = value; }
			}
			public bool HasRow_blocks {
				get { return base.has_field.has_field (1); }
			}

			public response () : base(max_field_count) {}

			public response (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.e = base.deserialize.read_integer ();
						break;
					case 1:
						this.row_blocks = base.deserialize.read_obj_list<block_info> ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.e, 0);
				}

				if (base.has_field.has_field (1)) {
					base.serialize.write_obj (this.row_blocks, 1);
				}

				return base.serialize.close ();
			}
		}


	}


	public class game_over {
	
		public class request : SprotoTypeBase {
			private static int max_field_count = 1;
			
			
			private Int64 _frame; // tag 0
			public Int64 frame {
				get { return _frame; }
				set { base.has_field.set_field (0, true); _frame = value; }
			}
			public bool HasFrame {
				get { return base.has_field.has_field (0); }
			}

			public request () : base(max_field_count) {}

			public request (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.frame = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.frame, 0);
				}

				return base.serialize.close ();
			}
		}


		public class response : SprotoTypeBase {
			private static int max_field_count = 1;
			
			
			private Int64 _e; // tag 0
			public Int64 e {
				get { return _e; }
				set { base.has_field.set_field (0, true); _e = value; }
			}
			public bool HasE {
				get { return base.has_field.has_field (0); }
			}

			public response () : base(max_field_count) {}

			public response (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.e = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.e, 0);
				}

				return base.serialize.close ();
			}
		}


	}


	public class game_raise {
	
		public class request : SprotoTypeBase {
			private static int max_field_count = 2;
			
			
			private Int64 _frame; // tag 0
			public Int64 frame {
				get { return _frame; }
				set { base.has_field.set_field (0, true); _frame = value; }
			}
			public bool HasFrame {
				get { return base.has_field.has_field (0); }
			}

			private Int64 _type; // tag 1
			public Int64 type {
				get { return _type; }
				set { base.has_field.set_field (1, true); _type = value; }
			}
			public bool HasType {
				get { return base.has_field.has_field (1); }
			}

			public request () : base(max_field_count) {}

			public request (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.frame = base.deserialize.read_integer ();
						break;
					case 1:
						this.type = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.frame, 0);
				}

				if (base.has_field.has_field (1)) {
					base.serialize.write_integer (this.type, 1);
				}

				return base.serialize.close ();
			}
		}


		public class response : SprotoTypeBase {
			private static int max_field_count = 1;
			
			
			private Int64 _e; // tag 0
			public Int64 e {
				get { return _e; }
				set { base.has_field.set_field (0, true); _e = value; }
			}
			public bool HasE {
				get { return base.has_field.has_field (0); }
			}

			public response () : base(max_field_count) {}

			public response (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.e = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.e, 0);
				}

				return base.serialize.close ();
			}
		}


	}


	public class game_ready {
	
		public class request : SprotoTypeBase {
			private static int max_field_count = 0;
			
			
			public request () : base(max_field_count) {}

			public request (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				return base.serialize.close ();
			}
		}


		public class response : SprotoTypeBase {
			private static int max_field_count = 1;
			
			
			private Int64 _e; // tag 0
			public Int64 e {
				get { return _e; }
				set { base.has_field.set_field (0, true); _e = value; }
			}
			public bool HasE {
				get { return base.has_field.has_field (0); }
			}

			public response () : base(max_field_count) {}

			public response (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.e = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.e, 0);
				}

				return base.serialize.close ();
			}
		}


	}


	public class game_rollback {
	
		public class request : SprotoTypeBase {
			private static int max_field_count = 1;
			
			
			private Int64 _frame; // tag 0
			public Int64 frame {
				get { return _frame; }
				set { base.has_field.set_field (0, true); _frame = value; }
			}
			public bool HasFrame {
				get { return base.has_field.has_field (0); }
			}

			public request () : base(max_field_count) {}

			public request (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.frame = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.frame, 0);
				}

				return base.serialize.close ();
			}
		}


		public class response : SprotoTypeBase {
			private static int max_field_count = 1;
			
			
			private Int64 _e; // tag 0
			public Int64 e {
				get { return _e; }
				set { base.has_field.set_field (0, true); _e = value; }
			}
			public bool HasE {
				get { return base.has_field.has_field (0); }
			}

			public response () : base(max_field_count) {}

			public response (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.e = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.e, 0);
				}

				return base.serialize.close ();
			}
		}


	}


	public class game_swap {
	
		public class request : SprotoTypeBase {
			private static int max_field_count = 3;
			
			
			private Int64 _frame; // tag 0
			public Int64 frame {
				get { return _frame; }
				set { base.has_field.set_field (0, true); _frame = value; }
			}
			public bool HasFrame {
				get { return base.has_field.has_field (0); }
			}

			private block_info _block1; // tag 1
			public block_info block1 {
				get { return _block1; }
				set { base.has_field.set_field (1, true); _block1 = value; }
			}
			public bool HasBlock1 {
				get { return base.has_field.has_field (1); }
			}

			private block_info _block2; // tag 2
			public block_info block2 {
				get { return _block2; }
				set { base.has_field.set_field (2, true); _block2 = value; }
			}
			public bool HasBlock2 {
				get { return base.has_field.has_field (2); }
			}

			public request () : base(max_field_count) {}

			public request (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.frame = base.deserialize.read_integer ();
						break;
					case 1:
						this.block1 = base.deserialize.read_obj<block_info> ();
						break;
					case 2:
						this.block2 = base.deserialize.read_obj<block_info> ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.frame, 0);
				}

				if (base.has_field.has_field (1)) {
					base.serialize.write_obj (this.block1, 1);
				}

				if (base.has_field.has_field (2)) {
					base.serialize.write_obj (this.block2, 2);
				}

				return base.serialize.close ();
			}
		}


		public class response : SprotoTypeBase {
			private static int max_field_count = 1;
			
			
			private Int64 _e; // tag 0
			public Int64 e {
				get { return _e; }
				set { base.has_field.set_field (0, true); _e = value; }
			}
			public bool HasE {
				get { return base.has_field.has_field (0); }
			}

			public response () : base(max_field_count) {}

			public response (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.e = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.e, 0);
				}

				return base.serialize.close ();
			}
		}


	}


	public class key_value : SprotoTypeBase {
		private static int max_field_count = 2;
		
		
		private Int64 _id; // tag 0
		public Int64 id {
			get { return _id; }
			set { base.has_field.set_field (0, true); _id = value; }
		}
		public bool HasId {
			get { return base.has_field.has_field (0); }
		}

		private Int64 _value; // tag 1
		public Int64 value {
			get { return _value; }
			set { base.has_field.set_field (1, true); _value = value; }
		}
		public bool HasValue {
			get { return base.has_field.has_field (1); }
		}

		public key_value () : base(max_field_count) {}

		public key_value (byte[] buffer) : base(max_field_count, buffer) {
			this.decode ();
		}

		protected override void decode () {
			int tag = -1;
			while (-1 != (tag = base.deserialize.read_tag ())) {
				switch (tag) {
				case 0:
					this.id = base.deserialize.read_integer ();
					break;
				case 1:
					this.value = base.deserialize.read_integer ();
					break;
				default:
					base.deserialize.read_unknow_data ();
					break;
				}
			}
		}

		public override int encode (SprotoStream stream) {
			base.serialize.open (stream);

			if (base.has_field.has_field (0)) {
				base.serialize.write_integer (this.id, 0);
			}

			if (base.has_field.has_field (1)) {
				base.serialize.write_integer (this.value, 1);
			}

			return base.serialize.close ();
		}
	}


	public class login {
	
		public class request : SprotoTypeBase {
			private static int max_field_count = 1;
			
			
			private string _rid; // tag 0
			public string rid {
				get { return _rid; }
				set { base.has_field.set_field (0, true); _rid = value; }
			}
			public bool HasRid {
				get { return base.has_field.has_field (0); }
			}

			public request () : base(max_field_count) {}

			public request (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.rid = base.deserialize.read_string ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_string (this.rid, 0);
				}

				return base.serialize.close ();
			}
		}


		public class response : SprotoTypeBase {
			private static int max_field_count = 3;
			
			
			private Int64 _e; // tag 0
			public Int64 e {
				get { return _e; }
				set { base.has_field.set_field (0, true); _e = value; }
			}
			public bool HasE {
				get { return base.has_field.has_field (0); }
			}

			private string _rname; // tag 1
			public string rname {
				get { return _rname; }
				set { base.has_field.set_field (1, true); _rname = value; }
			}
			public bool HasRname {
				get { return base.has_field.has_field (1); }
			}

			private Int64 _render; // tag 2
			public Int64 render {
				get { return _render; }
				set { base.has_field.set_field (2, true); _render = value; }
			}
			public bool HasRender {
				get { return base.has_field.has_field (2); }
			}

			public response () : base(max_field_count) {}

			public response (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.e = base.deserialize.read_integer ();
						break;
					case 1:
						this.rname = base.deserialize.read_string ();
						break;
					case 2:
						this.render = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.e, 0);
				}

				if (base.has_field.has_field (1)) {
					base.serialize.write_string (this.rname, 1);
				}

				if (base.has_field.has_field (2)) {
					base.serialize.write_integer (this.render, 2);
				}

				return base.serialize.close ();
			}
		}


	}


	public class matching_cancel {
	
		public class request : SprotoTypeBase {
			private static int max_field_count = 0;
			
			
			public request () : base(max_field_count) {}

			public request (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				return base.serialize.close ();
			}
		}


		public class response : SprotoTypeBase {
			private static int max_field_count = 1;
			
			
			private Int64 _e; // tag 0
			public Int64 e {
				get { return _e; }
				set { base.has_field.set_field (0, true); _e = value; }
			}
			public bool HasE {
				get { return base.has_field.has_field (0); }
			}

			public response () : base(max_field_count) {}

			public response (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.e = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.e, 0);
				}

				return base.serialize.close ();
			}
		}


	}


	public class matching_start {
	
		public class request : SprotoTypeBase {
			private static int max_field_count = 0;
			
			
			public request () : base(max_field_count) {}

			public request (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				return base.serialize.close ();
			}
		}


		public class response : SprotoTypeBase {
			private static int max_field_count = 1;
			
			
			private Int64 _e; // tag 0
			public Int64 e {
				get { return _e; }
				set { base.has_field.set_field (0, true); _e = value; }
			}
			public bool HasE {
				get { return base.has_field.has_field (0); }
			}

			public response () : base(max_field_count) {}

			public response (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.e = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.e, 0);
				}

				return base.serialize.close ();
			}
		}


	}


	public class package : SprotoTypeBase {
		private static int max_field_count = 3;
		
		
		private Int64 _type; // tag 0
		public Int64 type {
			get { return _type; }
			set { base.has_field.set_field (0, true); _type = value; }
		}
		public bool HasType {
			get { return base.has_field.has_field (0); }
		}

		private Int64 _session; // tag 1
		public Int64 session {
			get { return _session; }
			set { base.has_field.set_field (1, true); _session = value; }
		}
		public bool HasSession {
			get { return base.has_field.has_field (1); }
		}

		private string _ud; // tag 2
		public string ud {
			get { return _ud; }
			set { base.has_field.set_field (2, true); _ud = value; }
		}
		public bool HasUd {
			get { return base.has_field.has_field (2); }
		}

		public package () : base(max_field_count) {}

		public package (byte[] buffer) : base(max_field_count, buffer) {
			this.decode ();
		}

		protected override void decode () {
			int tag = -1;
			while (-1 != (tag = base.deserialize.read_tag ())) {
				switch (tag) {
				case 0:
					this.type = base.deserialize.read_integer ();
					break;
				case 1:
					this.session = base.deserialize.read_integer ();
					break;
				case 2:
					this.ud = base.deserialize.read_string ();
					break;
				default:
					base.deserialize.read_unknow_data ();
					break;
				}
			}
		}

		public override int encode (SprotoStream stream) {
			base.serialize.open (stream);

			if (base.has_field.has_field (0)) {
				base.serialize.write_integer (this.type, 0);
			}

			if (base.has_field.has_field (1)) {
				base.serialize.write_integer (this.session, 1);
			}

			if (base.has_field.has_field (2)) {
				base.serialize.write_string (this.ud, 2);
			}

			return base.serialize.close ();
		}
	}


	public class ping {
	
		public class request : SprotoTypeBase {
			private static int max_field_count = 0;
			
			
			public request () : base(max_field_count) {}

			public request (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				return base.serialize.close ();
			}
		}


		public class response : SprotoTypeBase {
			private static int max_field_count = 1;
			
			
			private Int64 _server_time; // tag 0
			public Int64 server_time {
				get { return _server_time; }
				set { base.has_field.set_field (0, true); _server_time = value; }
			}
			public bool HasServer_time {
				get { return base.has_field.has_field (0); }
			}

			public response () : base(max_field_count) {}

			public response (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.server_time = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.server_time, 0);
				}

				return base.serialize.close ();
			}
		}


	}


	public class skill_info {
	
		public class request : SprotoTypeBase {
			private static int max_field_count = 0;
			
			
			public request () : base(max_field_count) {}

			public request (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				return base.serialize.close ();
			}
		}


		public class response : SprotoTypeBase {
			private static int max_field_count = 1;
			
			
			private Int64 _e; // tag 0
			public Int64 e {
				get { return _e; }
				set { base.has_field.set_field (0, true); _e = value; }
			}
			public bool HasE {
				get { return base.has_field.has_field (0); }
			}

			public response () : base(max_field_count) {}

			public response (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.e = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.e, 0);
				}

				return base.serialize.close ();
			}
		}


	}


	public class skill_learn {
	
		public class request : SprotoTypeBase {
			private static int max_field_count = 0;
			
			
			public request () : base(max_field_count) {}

			public request (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				return base.serialize.close ();
			}
		}


		public class response : SprotoTypeBase {
			private static int max_field_count = 1;
			
			
			private Int64 _e; // tag 0
			public Int64 e {
				get { return _e; }
				set { base.has_field.set_field (0, true); _e = value; }
			}
			public bool HasE {
				get { return base.has_field.has_field (0); }
			}

			public response () : base(max_field_count) {}

			public response (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.e = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.e, 0);
				}

				return base.serialize.close ();
			}
		}


	}


	public class skill_level_up {
	
		public class request : SprotoTypeBase {
			private static int max_field_count = 0;
			
			
			public request () : base(max_field_count) {}

			public request (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				return base.serialize.close ();
			}
		}


		public class response : SprotoTypeBase {
			private static int max_field_count = 1;
			
			
			private Int64 _e; // tag 0
			public Int64 e {
				get { return _e; }
				set { base.has_field.set_field (0, true); _e = value; }
			}
			public bool HasE {
				get { return base.has_field.has_field (0); }
			}

			public response () : base(max_field_count) {}

			public response (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.e = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.e, 0);
				}

				return base.serialize.close ();
			}
		}


	}


	public class skill_use {
	
		public class request : SprotoTypeBase {
			private static int max_field_count = 1;
			
			
			private Int64 _skill_id; // tag 0
			public Int64 skill_id {
				get { return _skill_id; }
				set { base.has_field.set_field (0, true); _skill_id = value; }
			}
			public bool HasSkill_id {
				get { return base.has_field.has_field (0); }
			}

			public request () : base(max_field_count) {}

			public request (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.skill_id = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.skill_id, 0);
				}

				return base.serialize.close ();
			}
		}


		public class response : SprotoTypeBase {
			private static int max_field_count = 1;
			
			
			private Int64 _e; // tag 0
			public Int64 e {
				get { return _e; }
				set { base.has_field.set_field (0, true); _e = value; }
			}
			public bool HasE {
				get { return base.has_field.has_field (0); }
			}

			public response () : base(max_field_count) {}

			public response (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.e = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.e, 0);
				}

				return base.serialize.close ();
			}
		}


	}


}


public class C2S_Protocol : ProtocolBase {
	public static  C2S_Protocol Instance = new C2S_Protocol();
	private C2S_Protocol() {
		Protocol.SetProtocol<auth> (auth.Tag);
		Protocol.SetRequest<C2S_SprotoType.auth.request> (auth.Tag);
		Protocol.SetResponse<C2S_SprotoType.auth.response> (auth.Tag);

		Protocol.SetProtocol<game_give_up> (game_give_up.Tag);
		Protocol.SetRequest<C2S_SprotoType.game_give_up.request> (game_give_up.Tag);
		Protocol.SetResponse<C2S_SprotoType.game_give_up.response> (game_give_up.Tag);

		Protocol.SetProtocol<game_info> (game_info.Tag);
		Protocol.SetRequest<C2S_SprotoType.game_info.request> (game_info.Tag);
		Protocol.SetResponse<C2S_SprotoType.game_info.response> (game_info.Tag);

		Protocol.SetProtocol<game_matched> (game_matched.Tag);
		Protocol.SetRequest<C2S_SprotoType.game_matched.request> (game_matched.Tag);
		Protocol.SetResponse<C2S_SprotoType.game_matched.response> (game_matched.Tag);

		Protocol.SetProtocol<game_new_row> (game_new_row.Tag);
		Protocol.SetRequest<C2S_SprotoType.game_new_row.request> (game_new_row.Tag);
		Protocol.SetResponse<C2S_SprotoType.game_new_row.response> (game_new_row.Tag);

		Protocol.SetProtocol<game_over> (game_over.Tag);
		Protocol.SetRequest<C2S_SprotoType.game_over.request> (game_over.Tag);
		Protocol.SetResponse<C2S_SprotoType.game_over.response> (game_over.Tag);

		Protocol.SetProtocol<game_raise> (game_raise.Tag);
		Protocol.SetRequest<C2S_SprotoType.game_raise.request> (game_raise.Tag);
		Protocol.SetResponse<C2S_SprotoType.game_raise.response> (game_raise.Tag);

		Protocol.SetProtocol<game_ready> (game_ready.Tag);
		Protocol.SetRequest<C2S_SprotoType.game_ready.request> (game_ready.Tag);
		Protocol.SetResponse<C2S_SprotoType.game_ready.response> (game_ready.Tag);

		Protocol.SetProtocol<game_rollback> (game_rollback.Tag);
		Protocol.SetRequest<C2S_SprotoType.game_rollback.request> (game_rollback.Tag);
		Protocol.SetResponse<C2S_SprotoType.game_rollback.response> (game_rollback.Tag);

		Protocol.SetProtocol<game_swap> (game_swap.Tag);
		Protocol.SetRequest<C2S_SprotoType.game_swap.request> (game_swap.Tag);
		Protocol.SetResponse<C2S_SprotoType.game_swap.response> (game_swap.Tag);

		Protocol.SetProtocol<login> (login.Tag);
		Protocol.SetRequest<C2S_SprotoType.login.request> (login.Tag);
		Protocol.SetResponse<C2S_SprotoType.login.response> (login.Tag);

		Protocol.SetProtocol<matching_cancel> (matching_cancel.Tag);
		Protocol.SetRequest<C2S_SprotoType.matching_cancel.request> (matching_cancel.Tag);
		Protocol.SetResponse<C2S_SprotoType.matching_cancel.response> (matching_cancel.Tag);

		Protocol.SetProtocol<matching_start> (matching_start.Tag);
		Protocol.SetRequest<C2S_SprotoType.matching_start.request> (matching_start.Tag);
		Protocol.SetResponse<C2S_SprotoType.matching_start.response> (matching_start.Tag);

		Protocol.SetProtocol<ping> (ping.Tag);
		Protocol.SetRequest<C2S_SprotoType.ping.request> (ping.Tag);
		Protocol.SetResponse<C2S_SprotoType.ping.response> (ping.Tag);

		Protocol.SetProtocol<skill_info> (skill_info.Tag);
		Protocol.SetRequest<C2S_SprotoType.skill_info.request> (skill_info.Tag);
		Protocol.SetResponse<C2S_SprotoType.skill_info.response> (skill_info.Tag);

		Protocol.SetProtocol<skill_learn> (skill_learn.Tag);
		Protocol.SetRequest<C2S_SprotoType.skill_learn.request> (skill_learn.Tag);
		Protocol.SetResponse<C2S_SprotoType.skill_learn.response> (skill_learn.Tag);

		Protocol.SetProtocol<skill_level_up> (skill_level_up.Tag);
		Protocol.SetRequest<C2S_SprotoType.skill_level_up.request> (skill_level_up.Tag);
		Protocol.SetResponse<C2S_SprotoType.skill_level_up.response> (skill_level_up.Tag);

		Protocol.SetProtocol<skill_use> (skill_use.Tag);
		Protocol.SetRequest<C2S_SprotoType.skill_use.request> (skill_use.Tag);
		Protocol.SetResponse<C2S_SprotoType.skill_use.response> (skill_use.Tag);

	}

	public class auth {
		public const int Tag = 1020;
	}

	public class game_give_up {
		public const int Tag = 1080;
	}

	public class game_info {
		public const int Tag = 1060;
	}

	public class game_matched {
		public const int Tag = 1067;
	}

	public class game_new_row {
		public const int Tag = 1068;
	}

	public class game_over {
		public const int Tag = 1081;
	}

	public class game_raise {
		public const int Tag = 1066;
	}

	public class game_ready {
		public const int Tag = 1061;
	}

	public class game_rollback {
		public const int Tag = 1075;
	}

	public class game_swap {
		public const int Tag = 1065;
	}

	public class login {
		public const int Tag = 1021;
	}

	public class matching_cancel {
		public const int Tag = 1041;
	}

	public class matching_start {
		public const int Tag = 1040;
	}

	public class ping {
		public const int Tag = 1001;
	}

	public class skill_info {
		public const int Tag = 1090;
	}

	public class skill_learn {
		public const int Tag = 1091;
	}

	public class skill_level_up {
		public const int Tag = 1092;
	}

	public class skill_use {
		public const int Tag = 1100;
	}

}